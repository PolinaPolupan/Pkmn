services:
  admin-server:
    container_name: admin-server
    build:
      context: ./pokemon-admin-server
      dockerfile: Dockerfile
    ports:
        - '8090:8090'
    networks:
      - pokemon-network

  auth-server:
    build:
      context: ./pokemon-auth
      dockerfile: Dockerfile
    ports:
      - '9000:9000'
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      FLYWAY_ENABLED: true
    depends_on:
      - postgres
    networks:
      - pokemon-network

  pokemon-api:
    build:
      context: ./pokemon-api
      dockerfile: Dockerfile
    ports:
      - '8082:8082'
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      FLYWAY_ENABLED: true
    depends_on:
      - postgres
    networks:
      - pokemon-network

  pokemon-client:
    build:
      context: ./pokemon-client
      dockerfile: Dockerfile
    ports:
      - '8081:8081'
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      FLYWAY_ENABLED: true
    depends_on:
      postgres:
        condition: service_started
      keycloak:
        condition: service_started
    networks:
      - pokemon-network

  postgres:
    container_name: 'db'
    image: 'postgres:17.2-alpine'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - pokemon-network

  keycloak:
    container_name: keycloak.openid-provider
    image: quay.io/keycloak/keycloak:25.0.1
    command:
      - start-dev
      - --import-realm
    ports:
      - 8080:8080
    volumes:
      - ./keycloak/:/opt/keycloak/data/import/
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_URL: http://localhost:8080
      KC_HOSTNAME_ADMIN_URL: http://localhost:8080
      KC_HOSTNAME_STRICT_BACKCHANNEL: true
      KC_HTTP_RELATIVE_PATH: /
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: [ 'CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/auth/health/live' ]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - pokemon-network

volumes:
  postgres_data:

networks:
  pokemon-network:
    driver: bridge